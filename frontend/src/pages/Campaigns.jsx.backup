import { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import API from '../api';

export default function Campaigns() {
  const [campaigns, setCampaigns] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showSendModal, setShowSendModal] = useState(false);
  const [selectedCampaign, setSelectedCampaign] = useState(null);
  const [sending, setSending] = useState(false);
  const navigate = useNavigate();

  const fetchCampaigns = async () => {
    try {
      setLoading(true);
      setError(null);

      const res = await API.get('/campaigns');
      const campaignsData = res.data.campaigns || res.data;
      setCampaigns(Array.isArray(campaignsData) ? campaignsData : []);

    } catch (err) {
      console.error("Error fetching campaigns", err);
      setError("Failed to load campaigns");
      setCampaigns([]);
    } finally {
      setLoading(false);
    }
  };

  const openSendModal = (campaign) => {
    setSelectedCampaign(campaign);
    setShowSendModal(true);
  };

  const closeSendModal = () => {
    setShowSendModal(false);
    setSelectedCampaign(null);
    setSending(false);
  };

  const confirmSend = async () => {
    if (!selectedCampaign) return;

    try {
      setSending(true);
      await API.post(`/campaigns/${selectedCampaign._id}/send`);
      alert('Campaign sent successfully!');
      closeSendModal();
      await fetchCampaigns();
    } catch (err) {
      console.error('Error sending campaign:', err);
      if (err.response?.status === 404) {
        alert('Send endpoint not implemented yet');
      } else {
        alert(`Failed to send campaign: ${err.response?.data?.detail || 'Unknown error'}`);
      }
      setSending(false);
    }
  };

  const handleSend = async (id) => {
    const campaign = campaigns.find(c => c._id === id);
    if (campaign) {
      openSendModal(campaign);
    }
  };

  const handleDelete = async (id) => {
    const campaign = campaigns.find(c => c._id === id);
    const campaignName = campaign?.title || 'this campaign';

    if (!window.confirm(`Are you sure you want to delete "${campaignName}"?`)) return;

    try {
      await API.delete(`/campaigns/${id}`);
      alert(`Campaign "${campaignName}" deleted successfully!`);
      setCampaigns(campaigns.filter(c => c._id !== id));

    } catch (err) {
      console.error("Failed to delete campaign:", err);

      if (err.response?.status === 404) {
        alert('Campaign not found or already deleted');
        setCampaigns(campaigns.filter(c => c._id !== id));
      } else {
        alert(`Failed to delete campaign: ${err.response?.data?.detail || 'Unknown error'}`);
      }
    }
  };

  useEffect(() => {
    fetchCampaigns();
  }, []);

  if (loading) {
    return (
      <div className="max-w-4xl mx-auto mt-10">
        <p className="text-center">Loading campaigns...</p>
      </div>
    );
  }

  // Calculate campaign stats
  const totalCampaigns = campaigns.length;
  const draftCampaigns = campaigns.filter(c => c.status === 'draft' || !c.status).length;
  const sentCampaigns = campaigns.filter(c => c.status === 'sent').length;

  return (
    <div className="max-w-4xl mx-auto mt-10">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">📢 Campaigns</h2>

        {/* ✅ Only Create Campaign Button */}
        <button
          onClick={() => navigate('/campaigns/create')}
          className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
        >
          ✨ Create Campaign
        </button>
      </div>

      {/* Error Display */}
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
          {error}
          <button
            onClick={fetchCampaigns}
            className="ml-2 underline hover:no-underline"
          >
            Try Again
          </button>
        </div>
      )}

      {/* ✅ Campaign Stats Section */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-6 mb-6">
        <div className="bg-blue-50 p-6 rounded-lg border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-blue-600 font-medium">Total Campaigns</p>
              <p className="text-3xl font-bold text-blue-800">{totalCampaigns}</p>
            </div>
            <span className="text-4xl">📊</span>
          </div>
        </div>

        <div className="bg-yellow-50 p-6 rounded-lg border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-yellow-600 font-medium">Draft Campaigns</p>
              <p className="text-3xl font-bold text-yellow-800">{draftCampaigns}</p>
            </div>
            <span className="text-4xl">📝</span>
          </div>
        </div>

        <div className="bg-green-50 p-6 rounded-lg border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-green-600 font-medium">Sent Campaigns</p>
              <p className="text-3xl font-bold text-green-800">{sentCampaigns}</p>
            </div>
            <span className="text-4xl">📧</span>
          </div>
        </div>
      </div>

      {/* Campaigns List */}
      <div className="bg-white shadow rounded">
        <div className="p-4 border-b">
          <h3 className="text-lg font-semibold">📋 Your Campaigns ({campaigns.length})</h3>
        </div>

        {campaigns.length === 0 ? (
          <div className="p-8 text-center text-gray-500">
            <p className="text-lg mb-2">📭 No campaigns yet</p>
            <p>Click "Create Campaign" to get started!</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full table-auto text-sm">
              <thead>
                <tr className="bg-gray-100 text-left">
                  <th className="p-3 font-semibold">Campaign Name</th>
                  <th className="p-3 font-semibold">Subject</th>
                  <th className="p-3 font-semibold">Status</th>
                  <th className="p-3 font-semibold">Created</th>
                  <th className="p-3 font-semibold">Actions</th>
                </tr>
              </thead>
              <tbody>
                {campaigns.map(c => (
                  <tr key={c._id} className="border-t hover:bg-gray-50">
                    <td className="p-3 font-medium">{c.title}</td>
                    <td className="p-3 text-gray-700">{c.subject}</td>
                    <td className="p-3">
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        c.status === 'sent'
                          ? 'bg-green-100 text-green-800'
                          : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {c.status || 'draft'}
                      </span>
                    </td>
                    <td className="p-3 text-gray-600">
                      {c.created_at ? new Date(c.created_at).toLocaleDateString() : '-'}
                    </td>
                    <td className="p-3">
                      <div className="flex gap-3">
                        <Link
                          to={`/campaigns/${c._id}/edit`}
                          className="text-blue-600 hover:text-blue-800 hover:underline"
                        >
                          📝 Edit
                        </Link>
                        <button
                          onClick={() => handleSend(c._id)}
                          className="text-green-600 hover:text-green-800 hover:underline"
                          disabled={c.status === 'sent'}
                        >
                          📧 {c.status === 'sent' ? 'Sent' : 'Send'}
                        </button>
			<Link
			  to={`/analytics/campaign/${c._id}`}
                          className="text-purple-600 hover:text-purple-800 hover:underline"
                        >
                         📊 Report
                        </Link>
                        <button
                          onClick={() => handleDelete(c._id)}
                          className="text-red-600 hover:text-red-800 hover:underline"
                        >
                          🗑️ Delete
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Send Confirmation Modal */}
      {showSendModal && selectedCampaign && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            {/* Modal Header */}
            <div className="px-6 py-4 border-b border-gray-200">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold text-gray-900">📤 Send Campaign</h3>
                <button
                  onClick={closeSendModal}
                  className="text-gray-400 hover:text-gray-600"
                  disabled={sending}
                >
                  ✕
                </button>
              </div>
            </div>

            {/* Modal Content */}
            <div className="px-6 py-4 space-y-4">
              {/* Campaign Info */}
              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-medium text-gray-900 mb-2">Campaign Details</h4>
                <div className="space-y-2 text-sm">
                  <p><span className="font-medium">Title:</span> {selectedCampaign.title}</p>
                  <p><span className="font-medium">Subject:</span> {selectedCampaign.subject}</p>
                  <p><span className="font-medium">From:</span> {selectedCampaign.sender_name || 'Not set'} &lt;{selectedCampaign.sender_email || 'Not set'}&gt;</p>
                  <div>
                    <span className="font-medium">Target Lists:</span>
                    {selectedCampaign.target_lists && selectedCampaign.target_lists.length > 0 ? (
                      <div className="mt-2 space-y-2">
                        {selectedCampaign.target_lists.map((list, index) => (
                          <div key={index} className="flex items-center justify-between bg-blue-50 px-3 py-2 rounded border">
                            <span className="text-sm font-medium text-blue-900">
                              📋 {list.name || list.list_name || `List ${index + 1}`}
                            </span>
                            <span className="text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded">
                              {list.subscriber_count || list.count || 0} subscribers
                            </span>
                          </div>
                        ))}
                        <div className="mt-3 pt-2 border-t border-gray-200">
                          <p className="text-xs text-gray-600 font-medium">
                            📊 Total: {selectedCampaign.target_lists.length} list(s) • 
                            {selectedCampaign.target_lists.reduce((total, list) => total + (list.subscriber_count || list.count || 0), 0)} total recipients
                          </p>
                        </div>
                      </div>
                    ) : (
                      <div className="mt-2 bg-red-50 border border-red-200 rounded p-3">
                        <span className="text-red-600 text-sm">⚠️ No subscriber lists selected</span>
                        <p className="text-red-500 text-xs mt-1">This campaign cannot be sent without target lists</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Email Preview */}
              <div>
                <h4 className="font-medium text-gray-900 mb-2">Email Preview</h4>
                <div className="border rounded-lg p-4 bg-gray-50 max-h-60 overflow-y-auto">
                  <div
                    dangerouslySetInnerHTML={{ __html: selectedCampaign.content || '<p>No content available</p>' }}
                    style={{
                      fontFamily: 'Arial, sans-serif',
                      lineHeight: '1.6',
                      color: '#333333'
                    }}
                  />
                </div>
              </div>

              {/* Warning */}
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <div className="flex items-start">
                  <span className="text-yellow-600 mr-3 text-lg">⚠️</span>
                  <div>
                    <h4 className="text-yellow-800 font-medium">Important</h4>
                    <p className="text-yellow-700 text-sm mt-1">
                      Once sent, this campaign cannot be modified or stopped. Make sure all details are correct.
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Modal Footer */}
            <div className="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
              <button
                onClick={closeSendModal}
                className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                disabled={sending}
              >
                Cancel
              </button>
              <button
                onClick={confirmSend}
                disabled={sending}
                className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {sending ? '📤 Sending...' : '📤 Confirm & Send'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

